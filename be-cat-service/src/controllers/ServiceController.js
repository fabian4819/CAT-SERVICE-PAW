const Service = require("../models/ServiceModels");

// Create a new service
exports.createServices = async (req, res) => {
    const { serviceType, appointmentDate, price, customerID, employeeID, catID, serviceDescription } = req.body;

    const service = new Service({
        serviceType,
        appointmentDate,
        price,
        customerID,
        employeeID,
        catID,
        serviceDescription,
    });
    service
        .save()
        .then(() => {
            res.status(200).json({
                message: "Service created successfully!",
                data: serviceType,
            });
        })
        .catch((err) => {
            res.status(400).json({
                error: err,
            });
        });
};

// GET ALL SERVICES
exports.readServices = async (req, res) => {
    Service.find() // Find all services in the service database
        .then((services) => {
            res.status(200).json({
                data: services,
            });
        })
        .catch((err) => {
            res.status(400).json({
                error: err,
            });
        });
};

// UPDATE SERVICE
exports.updateServices = async (req, res) => {
    const { id } = req.params; // Automatically generated by MongoDB, Params = in URL request
    const { serviceType, appointmentDate, price, customerID, employeeID, catID, serviceDescription } = req.body;

    Service.findByIdAndUpdate(id, {
        serviceType,
        appointmentDate,
        price,
        customerID,
        employeeID,
        catID,
        serviceDescription,
    })
        .then(() => {
            res.status(200).json({
                message: "Successfully updated service!",
            });
        })
        .catch((err) => {
            res.status(400).json({
                error: err,
            });
        });
};

// DELETE SERVICE
exports.deleteServices = async (req, res) => {
    const { id } = req.params; // Pass _id in params

    Service.findByIdAndDelete(id)
        .then(() => {
            res.status(200).json({
                message: "Service deleted successfully!",
            });
        })
        .catch((err) => {
            res.status(400).json({
                error: err,
            });
        });
};

// SORT SERVICES BY SPECIFIED FIELD
exports.sortServices = async (req, res) => {
    const { sortBy, sortOrder } = req.query;

    // Default order is ascending
    const order = sortOrder === "desc" ? -1 : 1; // descending if sortOrder is 'desc'

    const allowedSortFields = ["serviceType", "price", "appointmentDate"];
    const isValidSortField = allowedSortFields.includes(sortBy);

    if (!isValidSortField) {
        return res.status(400).json({
            error: "Invalid field. Please sort by: serviceType, price, or appointmentDate.",
        });
    }

    try {
        const services = await Service.find().sort({ [sortBy]: order });
        res.status(200).json({
            data: services,
        });
    } catch (err) {
        res.status(400).json({
            error: err.message || "Error occurred while sorting services.",
        });
    }
};

// FIND SERVICES BY KEYWORD
exports.findServicesByKeyword = async (req, res) => {
    const { keyword } = req.query;

    if (!keyword) {
        return res.status(400).json({
            error: "Query cannot be empty!",
        });
    }

    try {
        const regex = new RegExp(keyword, "i"); // Case-insensitive search
        const services = await Service.find({
            $or: [{ serviceType: regex }, { serviceDescription: regex }],
        });

        res.status(200).json({
            data: services,
        });
    } catch (err) {
        res.status(400).json({
            error: err.message || "Error occurred while searching for services.",
        });
    }
};
